// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ.v
// Created: 2020-09-15 17:49:42
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2e-09
// Target subsystem base rate: 2e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2e-09
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// m_axis_data                   ce_out        2e-09
// m_axis_valid                  ce_out        2e-09
// s_axis_ready                  ce_out        2e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ
// Source Path: pentek_dac_ip_test/DAC_NCO_4xSampling_IQ
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ
          (clk,
           reset,
           clk_enable,
           s_axis_data,
           s_axis_valid,
           m_axis_ready,
           nco_phase_inc_reg,
           src_sel_reg,
           ce_out,
           m_axis_data,
           m_axis_valid,
           s_axis_ready);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [127:0] s_axis_data;  // ufix128
  input   s_axis_valid;
  input   m_axis_ready;
  input   [31:0] nco_phase_inc_reg;  // uint32
  input   src_sel_reg;  // ufix1
  output  ce_out;
  output  [127:0] m_axis_data;  // ufix128
  output  m_axis_valid;
  output  s_axis_ready;


  wire enb;
  wire signed [15:0] Vector_NCO_out1_re_0;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_re_1;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_re_2;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_re_3;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_im_0;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_im_1;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_im_2;  // sfix16_En15
  wire signed [15:0] Vector_NCO_out1_im_3;  // sfix16_En15
  wire Vector_NCO_out2;
  wire [127:0] y;  // ufix128
  wire [127:0] To_Data_Bus1_out1_data;  // ufix128
  wire To_Data_Bus1_out1_valid;
  wire [127:0] s;  // ufix128
  wire [127:0] To_Data_Bus_out1_data;  // ufix128
  wire To_Data_Bus_out1_valid;
  wire switch_compare_1;
  reg [127:0] data;  // ufix128
  wire [127:0] s_1;  // ufix128
  reg [127:0] data_1;  // ufix128
  wire [127:0] s_2;  // ufix128
  wire [127:0] data_2;  // ufix128
  wire [127:0] s_3;  // ufix128
  reg [127:0] data_3;  // ufix128
  wire [127:0] data_4;  // ufix128
  wire switch_compare_1_1;
  reg  valid;
  wire s_4;
  reg  valid_1;
  wire s_5;
  wire valid_2;
  wire s_6;
  reg  valid_3;
  wire valid_4;
  wire Constant1_out1;

  // AXI Stream Slave
  // 
  // AXI Stream Master


  DAC_NCO_4_ip_src_Vector_NCO u_Vector_NCO (.clk(clk),
                                            .reset(reset),
                                            .enb(clk_enable),
                                            .inc(nco_phase_inc_reg),  // uint32
                                            .dataOut_re_0(Vector_NCO_out1_re_0),  // sfix16_En15
                                            .dataOut_re_1(Vector_NCO_out1_re_1),  // sfix16_En15
                                            .dataOut_re_2(Vector_NCO_out1_re_2),  // sfix16_En15
                                            .dataOut_re_3(Vector_NCO_out1_re_3),  // sfix16_En15
                                            .dataOut_im_0(Vector_NCO_out1_im_0),  // sfix16_En15
                                            .dataOut_im_1(Vector_NCO_out1_im_1),  // sfix16_En15
                                            .dataOut_im_2(Vector_NCO_out1_im_2),  // sfix16_En15
                                            .dataOut_im_3(Vector_NCO_out1_im_3),  // sfix16_En15
                                            .validOut(Vector_NCO_out2)
                                            );

  DAC_NCO_4_ip_src_Pack_Complex_Vector u_Pack_Complex_Vector (.u_re_0(Vector_NCO_out1_re_0),  // sfix16_En15
                                                              .u_re_1(Vector_NCO_out1_re_1),  // sfix16_En15
                                                              .u_re_2(Vector_NCO_out1_re_2),  // sfix16_En15
                                                              .u_re_3(Vector_NCO_out1_re_3),  // sfix16_En15
                                                              .u_im_0(Vector_NCO_out1_im_0),  // sfix16_En15
                                                              .u_im_1(Vector_NCO_out1_im_1),  // sfix16_En15
                                                              .u_im_2(Vector_NCO_out1_im_2),  // sfix16_En15
                                                              .u_im_3(Vector_NCO_out1_im_3),  // sfix16_En15
                                                              .y(y)  // ufix128
                                                              );

  DAC_NCO_4_ip_src_To_Data_Bus1 u_To_Data_Bus1 (.data(y),  // ufix128
                                                .valid(Vector_NCO_out2),
                                                .bus_data(To_Data_Bus1_out1_data),  // ufix128
                                                .bus_valid(To_Data_Bus1_out1_valid)
                                                );

  assign s = To_Data_Bus1_out1_data;

  assign enb = clk_enable;

  DAC_NCO_4_ip_src_To_Data_Bus u_To_Data_Bus (.data(s_axis_data),  // ufix128
                                              .valid(s_axis_valid),
                                              .bus_data(To_Data_Bus_out1_data),  // ufix128
                                              .bus_valid(To_Data_Bus_out1_valid)
                                              );

  assign switch_compare_1 = src_sel_reg > 1'b0;



  always @(posedge clk)
    begin : PipelineDelay2_1_process
      if (reset == 1'b1) begin
        data <= 128'h00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          data <= s;
        end
      end
    end



  assign s_1 = data;

  always @(posedge clk)
    begin : PipelineDelay1_1_process
      if (reset == 1'b1) begin
        data_1 <= 128'h00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          data_1 <= To_Data_Bus_out1_data;
        end
      end
    end



  assign s_2 = data_1;

  assign data_2 = (switch_compare_1 == 1'b0 ? s_1 :
              s_2);



  assign s_3 = data_2;

  always @(posedge clk)
    begin : PipelineDelay_1_process
      if (reset == 1'b1) begin
        data_3 <= 128'h00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          data_3 <= s_3;
        end
      end
    end



  assign data_4 = data_3;

  assign m_axis_data = data_4;

  assign switch_compare_1_1 = src_sel_reg > 1'b0;



  always @(posedge clk)
    begin : PipelineDelay2_2_process
      if (reset == 1'b1) begin
        valid <= 1'b0;
      end
      else begin
        if (enb) begin
          valid <= To_Data_Bus1_out1_valid;
        end
      end
    end



  assign s_4 = valid;

  always @(posedge clk)
    begin : PipelineDelay1_2_process
      if (reset == 1'b1) begin
        valid_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          valid_1 <= To_Data_Bus_out1_valid;
        end
      end
    end



  assign s_5 = valid_1;

  assign valid_2 = (switch_compare_1_1 == 1'b0 ? s_4 :
              s_5);



  assign s_6 = valid_2;

  always @(posedge clk)
    begin : PipelineDelay_2_process
      if (reset == 1'b1) begin
        valid_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          valid_3 <= s_6;
        end
      end
    end



  assign valid_4 = valid_3;

  assign m_axis_valid = valid_4;

  assign Constant1_out1 = 1'b1;



  assign s_axis_ready = Constant1_out1;

  assign ce_out = clk_enable;

endmodule  // DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ

