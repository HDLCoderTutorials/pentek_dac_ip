-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4_ip_dut.vhd
-- Created: 2020-09-15 17:55:25
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DAC_NCO_4_ip_dut
-- Source Path: DAC_NCO_4_ip/DAC_NCO_4_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DAC_NCO_4_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        s_axis_data                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_valid                      :   IN    std_logic;  -- ufix1
        m_axis_ready                      :   IN    std_logic;  -- ufix1
        nco_phase_inc_reg                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        src_sel_reg                       :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        m_axis_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m_axis_valid                      :   OUT   std_logic;  -- ufix1
        s_axis_ready                      :   OUT   std_logic  -- ufix1
        );
END DAC_NCO_4_ip_dut;


ARCHITECTURE rtl OF DAC_NCO_4_ip_dut IS

  -- Component Declarations
  COMPONENT DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          s_axis_data                     :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s_axis_valid                    :   IN    std_logic;  -- ufix1
          m_axis_ready                    :   IN    std_logic;  -- ufix1
          nco_phase_inc_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          src_sel_reg                     :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          m_axis_data                     :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m_axis_valid                    :   OUT   std_logic;  -- ufix1
          s_axis_ready                    :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ
    USE ENTITY work.DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL s_axis_valid_sig                 : std_logic;  -- ufix1
  SIGNAL m_axis_ready_sig                 : std_logic;  -- ufix1
  SIGNAL src_sel_reg_sig                  : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL m_axis_data_sig                  : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_valid_sig                 : std_logic;  -- ufix1
  SIGNAL s_axis_ready_sig                 : std_logic;  -- ufix1

BEGIN
  u_DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ : DAC_NCO_4_ip_src_DAC_NCO_4xSampling_IQ
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              s_axis_data => s_axis_data,  -- ufix128
              s_axis_valid => s_axis_valid_sig,  -- ufix1
              m_axis_ready => m_axis_ready_sig,  -- ufix1
              nco_phase_inc_reg => nco_phase_inc_reg,  -- ufix32
              src_sel_reg => src_sel_reg_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              m_axis_data => m_axis_data_sig,  -- ufix128
              m_axis_valid => m_axis_valid_sig,  -- ufix1
              s_axis_ready => s_axis_ready_sig  -- ufix1
              );

  s_axis_valid_sig <= s_axis_valid;

  m_axis_ready_sig <= m_axis_ready;

  src_sel_reg_sig <= src_sel_reg;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  m_axis_data <= m_axis_data_sig;

  m_axis_valid <= m_axis_valid_sig;

  s_axis_ready <= s_axis_ready_sig;

END rtl;

