// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4_ip_src_NCO_HDL_Optimized4.v
// Created: 2020-09-15 17:49:42
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DAC_NCO_4_ip_src_NCO_HDL_Optimized4
// Source Path: pentek_dac_ip_test/DAC_NCO_4xSampling_IQ/Vector NCO/For Each Subsystem/NCO HDL Optimized4
// Hierarchy Level: 3
// 
// NCO HDL Optimized
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DAC_NCO_4_ip_src_NCO_HDL_Optimized4
          (clk,
           reset,
           enb,
           inc,
           offset,
           validIn,
           complexexp_re,
           complexexp_im,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   [31:0] inc;  // uint32
  input   [31:0] offset;  // uint32
  input   validIn;
  output  signed [15:0] complexexp_re;  // sfix16_En15
  output  signed [15:0] complexexp_im;  // sfix16_En15
  output  validOut;


  reg  [0:4] outsel_reg_reg;  // ufix1 [5]
  wire [0:4] outsel_reg_reg_next;  // ufix1 [5]
  wire outsel;
  wire signed [15:0] outzero_re;  // sfix16_En15
  wire signed [15:0] outzero_im;  // sfix16_En15
  wire signed [15:0] const0;  // sfix16
  wire signed [15:0] pInc;  // sfix16
  wire signed [15:0] validPInc;  // sfix16
  reg signed [15:0] accphase_reg;  // sfix16
  wire signed [15:0] addpInc;  // sfix16
  wire signed [15:0] pOffset;  // sfix16
  wire signed [15:0] accoffset;  // sfix16
  reg signed [15:0] accoffsete_reg;  // sfix16
  wire signed [15:0] outs_re;  // sfix16_En15
  wire signed [15:0] outs_im;  // sfix16_En15
  wire signed [15:0] validouts_re;  // sfix16_En15
  wire signed [15:0] validouts_im;  // sfix16_En15
  reg signed [15:0] complexexp_re_1;  // sfix16_En15
  reg signed [15:0] complexexp_im_1;  // sfix16_En15
  reg  validOut_1;


  always @(posedge clk)
    begin : outsel_reg_process
      if (reset == 1'b1) begin
        outsel_reg_reg[0] <= 1'b0;
        outsel_reg_reg[1] <= 1'b0;
        outsel_reg_reg[2] <= 1'b0;
        outsel_reg_reg[3] <= 1'b0;
        outsel_reg_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          outsel_reg_reg[0] <= outsel_reg_reg_next[0];
          outsel_reg_reg[1] <= outsel_reg_reg_next[1];
          outsel_reg_reg[2] <= outsel_reg_reg_next[2];
          outsel_reg_reg[3] <= outsel_reg_reg_next[3];
          outsel_reg_reg[4] <= outsel_reg_reg_next[4];
        end
      end
    end

  assign outsel = outsel_reg_reg[4];
  assign outsel_reg_reg_next[0] = validIn;
  assign outsel_reg_reg_next[1] = outsel_reg_reg[0];
  assign outsel_reg_reg_next[2] = outsel_reg_reg[1];
  assign outsel_reg_reg_next[3] = outsel_reg_reg[2];
  assign outsel_reg_reg_next[4] = outsel_reg_reg[3];



  assign outzero_re = 16'sb0000000000000000;
  assign outzero_im = 16'sb0000000000000000;



  // Constant Zero
  assign const0 = 16'sb0000000000000000;



  assign pInc = $signed(inc[15:0]);



  assign validPInc = (validIn == 1'b0 ? const0 :
              pInc);



  // Add phase increment
  assign addpInc = accphase_reg + validPInc;



  // Phase increment accumulator register
  always @(posedge clk)
    begin : AccPhaseRegister_process
      if (reset == 1'b1) begin
        accphase_reg <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          accphase_reg <= addpInc;
        end
      end
    end



  assign pOffset = $signed(offset[15:0]);



  // Add phase offset
  assign accoffset = accphase_reg + pOffset;



  // Phase offset accumulator register
  always @(posedge clk)
    begin : AccOffsetRegister_process
      if (reset == 1'b1) begin
        accoffsete_reg <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          accoffsete_reg <= accoffset;
        end
      end
    end



  DAC_NCO_4_ip_src_WaveformGen u_Wave_inst (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .phaseIdx(accoffsete_reg),  // sfix16
                                            .exp_re(outs_re),  // sfix16_En15
                                            .exp_im(outs_im)  // sfix16_En15
                                            );

  assign validouts_re = (outsel == 1'b0 ? outzero_re :
              outs_re);
  assign validouts_im = (outsel == 1'b0 ? outzero_im :
              outs_im);



  // Output register
  always @(posedge clk)
    begin : OutputRegister_process
      if (reset == 1'b1) begin
        complexexp_re_1 <= 16'sb0000000000000000;
        complexexp_im_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          complexexp_re_1 <= validouts_re;
          complexexp_im_1 <= validouts_im;
        end
      end
    end



  // validOut register
  always @(posedge clk)
    begin : validOut_reg_process
      if (reset == 1'b1) begin
        validOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_1 <= outsel;
        end
      end
    end



  assign complexexp_re = complexexp_re_1;

  assign complexexp_im = complexexp_im_1;

  assign validOut = validOut_1;

endmodule  // DAC_NCO_4_ip_src_NCO_HDL_Optimized4

