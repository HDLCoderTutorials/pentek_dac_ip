-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4xSampling_IQ.vhd
-- Created: 2020-09-08 13:38:39
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 8e-09
-- Target subsystem base rate: 8e-09
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DAC_NCO_4xSampling_IQ
-- Source Path: pentek_dac_ip_test/DAC_NCO_4xSampling_IQ
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DAC_NCO_4xSampling_IQ_pkg.ALL;

ENTITY DAC_NCO_4xSampling_IQ IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        s_axis_data                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_valid                      :   IN    std_logic;
        m_axis_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m_axis_valid                      :   OUT   std_logic
        );
END DAC_NCO_4xSampling_IQ;


ARCHITECTURE rtl OF DAC_NCO_4xSampling_IQ IS

  -- Component Declarations
  COMPONENT Vector_NCO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          inc                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Pack_Complex_Vector
    PORT( u_re                            :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          u_im                            :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          y                               :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT To_Data_Bus1
    PORT( data                            :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          valid                           :   IN    std_logic;
          bus_data                        :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          bus_valid                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT To_Data_Bus
    PORT( data                            :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          valid                           :   IN    std_logic;
          bus_data                        :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          bus_valid                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Vector_NCO
    USE ENTITY work.Vector_NCO(rtl);

  FOR ALL : Pack_Complex_Vector
    USE ENTITY work.Pack_Complex_Vector(rtl);

  FOR ALL : To_Data_Bus1
    USE ENTITY work.To_Data_Bus1(rtl);

  FOR ALL : To_Data_Bus
    USE ENTITY work.To_Data_Bus(rtl);

  -- Signals
  SIGNAL Constant2_out1                   : std_logic;  -- ufix1_En1000
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Vector_NCO_out1_re               : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Vector_NCO_out1_im               : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Vector_NCO_out2                  : std_logic;
  SIGNAL y                                : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL To_Data_Bus1_out1_data           : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL To_Data_Bus1_out1_valid          : std_logic;
  SIGNAL s                                : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL To_Data_Bus_out1_data            : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL To_Data_Bus_out1_valid           : std_logic;
  SIGNAL To_Data_Bus_out1_data_unsigned   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL data                             : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL s_1                              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL data_1                           : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL s_2                              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL data_2                           : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL s_3                              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL data_3                           : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL data_4                           : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL s_4                              : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL s_5                              : std_logic;
  SIGNAL valid_2                          : std_logic;
  SIGNAL s_6                              : std_logic;
  SIGNAL valid_3                          : std_logic;
  SIGNAL valid_4                          : std_logic;

BEGIN
  -- AXI Stream Slave
  -- 
  -- AXI Stream Master

  u_Vector_NCO : Vector_NCO
    PORT MAP( clk => clk,
              reset => reset,
              inc => std_logic_vector(Constant_out1),  -- uint32
              dataOut_re => Vector_NCO_out1_re,  -- sfix16_En15 [4]
              dataOut_im => Vector_NCO_out1_im,  -- sfix16_En15 [4]
              validOut => Vector_NCO_out2
              );

  u_Pack_Complex_Vector : Pack_Complex_Vector
    PORT MAP( u_re => Vector_NCO_out1_re,  -- sfix16_En15 [4]
              u_im => Vector_NCO_out1_im,  -- sfix16_En15 [4]
              y => y  -- ufix128
              );

  u_To_Data_Bus1 : To_Data_Bus1
    PORT MAP( data => y,  -- ufix128
              valid => Vector_NCO_out2,
              bus_data => To_Data_Bus1_out1_data,  -- ufix128
              bus_valid => To_Data_Bus1_out1_valid
              );

  u_To_Data_Bus : To_Data_Bus
    PORT MAP( data => s_axis_data,  -- ufix128
              valid => s_axis_valid,
              bus_data => To_Data_Bus_out1_data,  -- ufix128
              bus_valid => To_Data_Bus_out1_valid
              );

  Constant2_out1 <= '0';

  Constant_out1 <= to_unsigned(6554, 32);

  s <= unsigned(To_Data_Bus1_out1_data);

  To_Data_Bus_out1_data_unsigned <= unsigned(To_Data_Bus_out1_data);

  
  switch_compare_1 <= '1' WHEN Constant2_out1 > '0' ELSE
      '0';

  PipelineDelay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data <= to_unsigned(0, 128);
      ELSE 
        data <= s;
      END IF;
    END IF;
  END PROCESS PipelineDelay2_1_process;


  s_1 <= data;

  PipelineDelay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_1 <= to_unsigned(0, 128);
      ELSE 
        data_1 <= To_Data_Bus_out1_data_unsigned;
      END IF;
    END IF;
  END PROCESS PipelineDelay1_1_process;


  s_2 <= data_1;

  
  data_2 <= s_1 WHEN switch_compare_1 = '0' ELSE
      s_2;

  s_3 <= data_2;

  PipelineDelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_3 <= to_unsigned(0, 128);
      ELSE 
        data_3 <= s_3;
      END IF;
    END IF;
  END PROCESS PipelineDelay_1_process;


  data_4 <= data_3;

  m_axis_data <= std_logic_vector(data_4);

  
  switch_compare_1_1 <= '1' WHEN Constant2_out1 > '0' ELSE
      '0';

  PipelineDelay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid <= '0';
      ELSE 
        valid <= To_Data_Bus1_out1_valid;
      END IF;
    END IF;
  END PROCESS PipelineDelay2_2_process;


  s_4 <= valid;

  PipelineDelay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid_1 <= '0';
      ELSE 
        valid_1 <= To_Data_Bus_out1_valid;
      END IF;
    END IF;
  END PROCESS PipelineDelay1_2_process;


  s_5 <= valid_1;

  
  valid_2 <= s_4 WHEN switch_compare_1_1 = '0' ELSE
      s_5;

  s_6 <= valid_2;

  PipelineDelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid_3 <= '0';
      ELSE 
        valid_3 <= s_6;
      END IF;
    END IF;
  END PROCESS PipelineDelay_2_process;


  valid_4 <= valid_3;

  m_axis_valid <= valid_4;

END rtl;

