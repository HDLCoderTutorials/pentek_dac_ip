-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4_fixed_ip_src_NCO_HDL_Optimized4.vhd
-- Created: 2020-09-08 13:47:15
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DAC_NCO_4_fixed_ip_src_NCO_HDL_Optimized4
-- Source Path: pentek_dac_ip_test/DAC_NCO_4xSampling_IQ/Vector NCO/For Each Subsystem/NCO HDL Optimized4
-- Hierarchy Level: 3
-- 
-- NCO HDL Optimized
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DAC_NCO_4_fixed_ip_src_NCO_HDL_Optimized4 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        inc                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        offset                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        complexexp_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        complexexp_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validOut                          :   OUT   std_logic
        );
END DAC_NCO_4_fixed_ip_src_NCO_HDL_Optimized4;


ARCHITECTURE rtl OF DAC_NCO_4_fixed_ip_src_NCO_HDL_Optimized4 IS

  -- Component Declarations
  COMPONENT DAC_NCO_4_fixed_ip_src_WaveformGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          phaseIdx                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          exp_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          exp_im                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DAC_NCO_4_fixed_ip_src_WaveformGen
    USE ENTITY work.DAC_NCO_4_fixed_ip_src_WaveformGen(rtl);

  -- Signals
  SIGNAL outsel_reg_reg                   : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL outsel                           : std_logic;
  SIGNAL outzero_re                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL outzero_im                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL const0                           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL inc_unsigned                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL pInc                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL validPInc                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL accphase_reg                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL addpInc                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL offset_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL pOffset                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL accoffset                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL accoffsete_reg                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL outs_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL outs_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL outs_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL outs_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL validouts_re                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL validouts_im                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL complexexp_re_tmp                : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL complexexp_im_tmp                : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  u_Wave_inst : DAC_NCO_4_fixed_ip_src_WaveformGen
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              phaseIdx => std_logic_vector(accoffsete_reg),  -- sfix16
              exp_re => outs_re,  -- sfix16_En15
              exp_im => outs_im  -- sfix16_En15
              );

  outsel_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        outsel_reg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        outsel_reg_reg(0) <= validIn;
        outsel_reg_reg(1 TO 4) <= outsel_reg_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS outsel_reg_process;

  outsel <= outsel_reg_reg(4);

  outzero_re <= to_signed(16#0000#, 16);
  outzero_im <= to_signed(16#0000#, 16);

  -- Constant Zero
  const0 <= to_signed(16#0000#, 16);

  inc_unsigned <= unsigned(inc);

  pInc <= signed(inc_unsigned(15 DOWNTO 0));

  
  validPInc <= const0 WHEN validIn = '0' ELSE
      pInc;

  -- Add phase increment
  addpInc <= accphase_reg + validPInc;

  -- Phase increment accumulator register
  AccPhaseRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accphase_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        accphase_reg <= addpInc;
      END IF;
    END IF;
  END PROCESS AccPhaseRegister_process;


  offset_unsigned <= unsigned(offset);

  pOffset <= signed(offset_unsigned(15 DOWNTO 0));

  -- Add phase offset
  accoffset <= accphase_reg + pOffset;

  -- Phase offset accumulator register
  AccOffsetRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accoffsete_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        accoffsete_reg <= accoffset;
      END IF;
    END IF;
  END PROCESS AccOffsetRegister_process;


  outs_re_signed <= signed(outs_re);

  outs_im_signed <= signed(outs_im);

  
  validouts_re <= outzero_re WHEN outsel = '0' ELSE
      outs_re_signed;
  
  validouts_im <= outzero_im WHEN outsel = '0' ELSE
      outs_im_signed;

  -- Output register
  OutputRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        complexexp_re_tmp <= to_signed(16#0000#, 16);
        complexexp_im_tmp <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        complexexp_re_tmp <= validouts_re;
        complexexp_im_tmp <= validouts_im;
      END IF;
    END IF;
  END PROCESS OutputRegister_process;


  complexexp_re <= std_logic_vector(complexexp_re_tmp);

  complexexp_im <= std_logic_vector(complexexp_im_tmp);

  -- validOut register
  validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOut <= '0';
      ELSIF enb = '1' THEN
        validOut <= outsel;
      END IF;
    END IF;
  END PROCESS validOut_reg_process;


END rtl;

