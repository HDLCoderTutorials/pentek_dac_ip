// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\pentek_dac_ip_test\DAC_NCO_4_ip.v
// Created: 2020-09-15 17:49:48
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DAC_NCO_4_ip
// Source Path: DAC_NCO_4_ip
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DAC_NCO_4_ip
          (IPCORE_CLK,
           IPCORE_RESETN,
           AXI4_Stream_Master_TREADY,
           AXI4_Stream_Slave_TDATA,
           AXI4_Stream_Slave_TVALID,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           AXI4_Stream_Master_TDATA,
           AXI4_Stream_Master_TVALID,
           AXI4_Stream_Master_TLAST,
           AXI4_Stream_Slave_TREADY,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   AXI4_Stream_Master_TREADY;  // ufix1
  input   [127:0] AXI4_Stream_Slave_TDATA;  // ufix128
  input   AXI4_Stream_Slave_TVALID;  // ufix1
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  [127:0] AXI4_Stream_Master_TDATA;  // ufix128
  output  AXI4_Stream_Master_TVALID;  // ufix1
  output  AXI4_Stream_Master_TLAST;  // ufix1
  output  AXI4_Stream_Slave_TREADY;  // ufix1
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1


  wire reset;
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire reset_before_sync;  // ufix1
  wire write_axi_enable;  // ufix1
  wire [31:0] write_packet_size_axi4_stream_master;  // ufix32
  wire [31:0] write_nco_phase_inc_reg;  // ufix32
  wire write_src_sel_reg;  // ufix1
  wire const_1;  // ufix1
  wire m_axis_valid_sig;  // ufix1
  wire top_user_valid;  // ufix1
  wire top_user_ready;  // ufix1
  wire m_axis_ready_sig;  // ufix1
  wire top_user_valid_1;  // ufix1
  wire s_axis_valid_sig;  // ufix1
  wire s_axis_ready_sig;  // ufix1
  wire top_user_ready_1;  // ufix1
  wire [127:0] top_user_data;  // ufix128
  wire ce_out_sig;  // ufix1
  wire [127:0] m_axis_data_sig;  // ufix128


  assign ip_timestamp = 32'b01110111110000010011100100000101;



  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset_before_sync = reset_cm | reset_internal;



  DAC_NCO_4_ip_reset_sync u_DAC_NCO_4_ip_reset_sync_inst (.clk(IPCORE_CLK),  // ufix1
                                                          .reset_in(reset_before_sync),  // ufix1
                                                          .reset_out(reset)
                                                          );

  DAC_NCO_4_ip_axi_lite u_DAC_NCO_4_ip_axi_lite_inst (.reset(reset),
                                                      .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                                      .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                                      .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                                      .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                                      .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                                      .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                                      .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                                      .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                                      .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                                      .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                                      .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                                      .read_ip_timestamp(ip_timestamp),  // ufix32
                                                      .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                                      .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                                      .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                                      .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                                      .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                                      .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                                      .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                                      .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                                      .write_axi_enable(write_axi_enable),  // ufix1
                                                      .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                                      .write_nco_phase_inc_reg(write_nco_phase_inc_reg),  // ufix32
                                                      .write_src_sel_reg(write_src_sel_reg),  // ufix1
                                                      .reset_internal(reset_internal)  // ufix1
                                                      );

  assign const_1 = 1'b1;



  assign top_user_valid = m_axis_valid_sig;



  assign m_axis_ready_sig = top_user_ready;



  assign s_axis_valid_sig = top_user_valid_1;



  assign top_user_ready_1 = s_axis_ready_sig;



  DAC_NCO_4_ip_axi4_stream_slave u_DAC_NCO_4_ip_axi4_stream_slave_inst (.clk(IPCORE_CLK),  // ufix1
                                                                        .reset(reset),
                                                                        .enb(const_1),
                                                                        .AXI4_Stream_Slave_TDATA(AXI4_Stream_Slave_TDATA),  // ufix128
                                                                        .AXI4_Stream_Slave_TVALID(AXI4_Stream_Slave_TVALID),  // ufix1
                                                                        .user_ready(top_user_ready_1),  // ufix1
                                                                        .AXI4_Stream_Slave_TREADY(AXI4_Stream_Slave_TREADY),  // ufix1
                                                                        .user_data(top_user_data),  // ufix128
                                                                        .user_valid(top_user_valid_1)  // ufix1
                                                                        );

  DAC_NCO_4_ip_dut u_DAC_NCO_4_ip_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                            .reset(reset),
                                            .dut_enable(write_axi_enable),  // ufix1
                                            .s_axis_data(top_user_data),  // ufix128
                                            .s_axis_valid(s_axis_valid_sig),  // ufix1
                                            .m_axis_ready(m_axis_ready_sig),  // ufix1
                                            .nco_phase_inc_reg(write_nco_phase_inc_reg),  // ufix32
                                            .src_sel_reg(write_src_sel_reg),  // ufix1
                                            .ce_out(ce_out_sig),  // ufix1
                                            .m_axis_data(m_axis_data_sig),  // ufix128
                                            .m_axis_valid(m_axis_valid_sig),  // ufix1
                                            .s_axis_ready(s_axis_ready_sig)  // ufix1
                                            );

  DAC_NCO_4_ip_axi4_stream_master u_DAC_NCO_4_ip_axi4_stream_master_inst (.clk(IPCORE_CLK),  // ufix1
                                                                          .reset(reset),
                                                                          .enb(const_1),
                                                                          .AXI4_Stream_Master_TREADY(AXI4_Stream_Master_TREADY),  // ufix1
                                                                          .user_data(m_axis_data_sig),  // ufix128
                                                                          .user_valid(top_user_valid),  // ufix1
                                                                          .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                                                          .AXI4_Stream_Master_TDATA(AXI4_Stream_Master_TDATA),  // ufix128
                                                                          .AXI4_Stream_Master_TVALID(AXI4_Stream_Master_TVALID),  // ufix1
                                                                          .AXI4_Stream_Master_TLAST(AXI4_Stream_Master_TLAST),  // ufix1
                                                                          .user_ready(top_user_ready)  // ufix1
                                                                          );

endmodule  // DAC_NCO_4_ip

